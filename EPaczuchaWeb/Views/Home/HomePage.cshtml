@{
    ViewData["Title"] = "Strona główna";
}

<div class="text-center">
    <h1 class="display-4">Witaj!</h1>
    <p>Aplikacja EPaczucha to projekt zaliczeniowy laboratoriów przedmiotu „Programowanie w środowisku ASP.NET”.</p>
    <p>Aplikacja wykonana została w platformie .NET 5 w środowisku Visual Studio 2022.</p>
    <p>Zajmuje się ona monitorowaniem oraz nadawaniem paczek/listów.</p>
    <hr />
    <ul class="list-group">Spełnione warunki oceniania: 
        <li class="list-group-item">Aplikacja zawiera formularze z walidacją,</li>
        <li class="list-group-item">Dane zostały utrwalone za pomocą EF (v5.0.13) przez 6 encji, z czego każda encja posiada relacje,</li>
        <li class="list-group-item">Wykorzystano DI, każdy Repository posiada swój interfejs po którym dziedziczy i który jest wstrzykiwany przy pomocy DI. Dodatkowo każdy interfejs Repository dziedziczy po specjalnym interfejsie CRUD zawierającym podstawowe funkcje CRUD, oraz po klasie repository bazowym. Na potrzeby warunków oceniania repozytoria te zostały wstrzynknięte. Jednak wiem, że jest to nie zalecane by były tak blisko użytkownika, w tym celu stworzyłem ManageraDto</li>
        <li class="list-group-item">W aplikacji została wprowadzona podstawowa autoryzacja z podziałem na role, użytkownik niezalogowany ma dostęp tylko do tej strony, klient do swoich paczek a administrator do listy klientów i ich paczek. Dodatkowo na potrzeby uproszczenia sprawdzenia funkcjonalności zdjąłem wszystkie domyślne wymagania Microsoftu odnośnie haseł (minimalna ilość znaków hasła to 6),</li>
        <li class="list-group-item">Aplikacja posiada własny routing oraz endpoint. Zostały wrdożone zasady REST dla API</li>
        <li class="list-group-item">W aplikacji zawarto 29 testów jednostkowych. Sprawdzone zostały w kontrolerach oraz cała logika wykorzystana w aplikacji zawarta w ManagerzeDto</li>
    </ul>
    <hr />
    <p>Do projektu testowego zostały dodane dwa Nuggety: "Moq"" - to symulacji interfejsów i managera oraz "Fluent Assertions"" w celu uproszczenia widoku oraz tworzenia testów jednostkowych.</p>
    <p>Użyty został Nugget AutoMapper w celu automatyzacji mapowania danych pomiędzy obiektami ViewModel/DataTransferObject/Entities.</p>
    <p>Wykorzystane zostały 3 kontrolery, 6 modeli oraz 8 widoków.</p>
    <p>W celach bezpieczeństwa aplikacja została podzielona na trzy warstwy: Aplikacji, Dto oraz Database.</p>
    <p>Aplikacja obsługuje połączenie z bazą danych SQL. Jest ona samowystarczalna i włączenie aplikacji stworzy wszystkie potrzebne obiekty.</p>
    <p>Baza danych została użyta z IdentityDbContext jednak ostatecznie zrezygnowałem z rozwiązania gotowych tabel EF. W warstwie bazy zostały wdrożone migracje.</p>
    <hr />
    <p>Dostępnych jest 4 użytkowników:.</p>
        <p>1. Administartor - Posiada on wszystkie widoki i prawa<br />Login: admin@admin.pl <br />Hasło: 123456</p><br />
        
        <p>2. Moderator - Posiada on wgląd w wszystkich użytkowników jednak nie może dodawać, usuwać ani edytować użytkowników aplikacji<br />Login: mod@mod.pl <br />Hasło: 654321</p><br />
        <p>3. Klient - Zwykły przykład klienta z swoimi paczkami<br />Login: klient@gmail.com <br />Hasło: 111222</p><br />
        <p>4. Klient - Zwykły przykład klienta z swoimi paczkami<br />Login: klient2@gmail.com <br />Hasło: 111222</p><br />
    
    <a asp-controller="Home" asp-action="LoginManager" >Przejdź dalej</a>
    @if (User.IsInRole("admin"))
    {
        <br /><br />
        <p style="font-size:small">W przypadku braku klientów w aplikacji <a asp-controller="Customer" asp-action="Add">dodaj</a> administratorze</p>
    }
</div>